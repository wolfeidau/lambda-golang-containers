// Package todosapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package todosapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the available tasks
	// (GET /todos)
	ListTodos(ctx echo.Context, params ListTodosParams) error
	// Create a todo
	// (POST /todos)
	CreateTodo(ctx echo.Context) error
	// Delete the todo
	// (DELETE /todos/{todoId})
	DeleteTodo(ctx echo.Context, todoId int64) error
	// Update the todo
	// (PUT /todos/{todoId})
	UpdateTodo(ctx echo.Context, todoId int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListTodos converts echo context to params.
func (w *ServerInterfaceWrapper) ListTodos(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTodosParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTodos(ctx, params)
	return err
}

// CreateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTodo(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTodo(ctx)
	return err
}

// DeleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "todoId", runtime.ParamLocationPath, ctx.Param("todoId"), &todoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTodo(ctx, todoId)
	return err
}

// UpdateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "todoId", runtime.ParamLocationPath, ctx.Param("todoId"), &todoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTodo(ctx, todoId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.ListTodos)
	router.POST(baseURL+"/todos", wrapper.CreateTodo)
	router.DELETE(baseURL+"/todos/:todoId", wrapper.DeleteTodo)
	router.PUT(baseURL+"/todos/:todoId", wrapper.UpdateTodo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXbW/bNhD+K8KtH/Vmx90AflratUCwvmHOMGCdUdDS2WIjkSpJSXEN/ffhSPktUZoU",
	"W4B+CGDAejnenZ577uFxC5mqaiVRWgNsCyYrsOLu8lLliv7xmld1iXSZaeQWP+XcIjCYppNfosk0ms4u",
	"05S5X5ym6d8QQo4m06K2QklgUHNjOqVzCEHkwKZnIRjLbWOAQaf0lZBrCMEKS1HgLb/CwBYY1BoNSsud",
	"lz6EWqsatRVobuWyvRHxssDAqlwFzkooGTi7EFZKV9wCA7qPrKjood3UFNhYTZn0IeRK3utZo1Fl8/2+",
	"CYE7nYocpRUrgfrYn5D259nBl5AW16jJ2Q7GOx2SAaWBsqmAfYSOC+vhPgBPXwuLkVSHitzp3L+/tbAP",
	"QeOXRmjMKaTI98XdJxyelO8QWy0/Y2adC4NZo4XdzImRvuRGrNsZXQhKo0CeO5wkr2jteWMLpcVXz5e9",
	"S16L33EDIVxHvOJflYx4LdbcYsc3EW9ssbPrzNz57ym6kCtH/kxJyzPr+qDiogQGFddXv3aqXGEs8pg3",
	"jjCnABE45x8uIIRSZCiNA3GXZs2zAoNpnEIIjSaPhbU1S5Ku62Lu3sZKr5NhqUneXLx89W7+KprGaVzY",
	"qnSlQV2Z96s56lZkOPgwLEmoMCY+Si9xpslRgx2l16I2PudJnMYpeVY1Sl4LYHDmHoVQc1s4/L1zulqj",
	"HedFKYwN1Cqw3FyZIOMyWGKwEqVFjXmw3FBjCx14GsT/UJ2oqV3NLnJg8EYYe+nCUGDNK7SoDbCPN6O9",
	"dk6NUwof7YZ3Uhsy/NKg3hxosn/ppc5VdmgO1wjhaI/wshxpkX5BVDe1ojqRp2ma7liD0kHE67oUmfu+",
	"5LOhzLdHkYXFyi18pnEFDH5KDnKcDFqcOCHuD4TWmm88S08RMU2WoTGrpgz2mNK6mU/q1PhCtrwU+YBV",
	"0PKywZO+c5APHfdxQV9qmqriejMUyQHPWy5KviyHEhDJ+JqqBf5+Md52TsGGBNnWcfct2kIRAT68n1+6",
	"2htjC62adfECC94KpYGBxNa1/KFnP9VaXW9cKwny9VoyNm+WDifJnm3P/5oz9oFrKyhazw5Z7F7+gWv3",
	"puTVMueM2J5M08nzKD2LzibJqpEZLTXJs+15Ld44q/hc0wrRYiJkq3x9jS9KrYyr/CmvXzq9c6X08ojG",
	"vlD55ht0uY66rotoF4gaXaLMVI75KX9Ot8T/R6+91Ygme8P/wPb7Sf49pH5+N6mFrBv7YDb70gTcgfRE",
	"YYLNK32ypb+LvPdIlzg2EP3mnnsZVrkakXRvMVD/m5o+PgcJP0Pa4iDiPi84Jq7VDR6L+r3T04h4z25/",
	"3jsVDPym3coRb/aNFssVmkAqG+C1MH7JA1l4A8cnHpKUNiNjxp81DY17oLyqBVzu9rIRBvolPygDH2Ur",
	"eNDBwI1B+5PBftY5zD+PcDL4wTeVx+ntG5R96u3eI6fbXRceDkLjh5h2An24PT0vjVst9uDeKuQwou46",
	"2N32i/7fAAAA///4Bhp0BBEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
