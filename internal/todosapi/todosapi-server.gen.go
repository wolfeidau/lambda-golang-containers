// Package todosapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package todosapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Redirect to the UI
	// (GET /)
	RedirectTodos(ctx echo.Context) error
	// List the available tasks
	// (GET /todos)
	ListTodos(ctx echo.Context, params ListTodosParams) error
	// Create a todo
	// (POST /todos)
	CreateTodo(ctx echo.Context) error
	// Delete the todo
	// (DELETE /todos/{todoId})
	DeleteTodo(ctx echo.Context, todoId int64) error
	// Update the todo
	// (PUT /todos/{todoId})
	UpdateTodo(ctx echo.Context, todoId int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RedirectTodos converts echo context to params.
func (w *ServerInterfaceWrapper) RedirectTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RedirectTodos(ctx)
	return err
}

// ListTodos converts echo context to params.
func (w *ServerInterfaceWrapper) ListTodos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTodosParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTodos(ctx, params)
	return err
}

// CreateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTodo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTodo(ctx)
	return err
}

// DeleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "todoId", runtime.ParamLocationPath, ctx.Param("todoId"), &todoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTodo(ctx, todoId)
	return err
}

// UpdateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "todoId", runtime.ParamLocationPath, ctx.Param("todoId"), &todoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTodo(ctx, todoId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.RedirectTodos)
	router.GET(baseURL+"/todos", wrapper.ListTodos)
	router.POST(baseURL+"/todos", wrapper.CreateTodo)
	router.DELETE(baseURL+"/todos/:todoId", wrapper.DeleteTodo)
	router.PUT(baseURL+"/todos/:todoId", wrapper.UpdateTodo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWb2/bthP+KsT9fi9lSXGzDdCrdW0HGOi6YU3fbAsGRjzbbCSSJU92DEPffThS/q8k",
	"K7oCBYLYlo7PHZ/nuSO3UNvWWYOGAlRbCPUSWxm/3lhl+RMfZOsa5K+1R0n4t5KEUMG0vPphcjWdTK9v",
	"yrKKf3lZln9ABgpD7bUjbQ1U4GQIa+sVZKAVVNMXGQSS1AWoYG39vTYLyIA0cRb4Rd6joCUK5zGgIRlR",
	"+gyctw49aQwXtWzPMt4sUZBVVsQobY2IcRnMrW8lQQX8e0K65Ye0cZw4kOdK+gyUNc8iewy26T4fmxl4",
	"FFQrNKTnGv0xnjb0/fUBSxvCBXoG29H4KCAHcBlouhaqP2EtNSW6D8TzbuF2pNRBkUfB0/uLhX0GHj91",
	"2qPilFrtxd0XnJ3Id8ht7z5iTdAzhjbz6L/aGpI1RSu2UjdQQSv9/Y9r28wx1yqXXdTstEau7+VvM8ig",
	"0TWaEPdhZMtZXjpZL1FM8xIy6DwjLolcVRTr9TqX8W1u/aIYlobi7ezVm3fv30ymeZkvqW0iO+jb8Ov8",
	"PfqVrnHACFVRMDchPyqviKHFkcePyluhD6nmq7zMS0a2Do10Gip4ER9l4CQto8wF/1sgXaryGueya0hw",
	"jyTLE5tUaY818XduqQ8zoY3CB+HkAvO/DMRkKX6moILfhwVcIMvkMTjLFHDCF+X0Mu9ICgaPNghd20q/",
	"OcI9RDEbchHYISTDfYBbXpHIe3STbL1GBxJ2LuIqUUsj7lDMdUPoUYm7DeNrL5LTxvb4Vof9/pz0skVC",
	"z4WcZ/s5goZYcMp2hs4DjQM/deg3kO38tX+Zpml07tB/sdey0TaUTTPShf3tmQjTstx1BZpIkXSu0XXc",
	"X/ExcOXbo8yasI0L/+9xDhX8rzhM/GIY90Wc9f0+ufReblIXnjISurrGEOZdc/AZr7tORZ0Gz8xKNloN",
	"XImVbLpzW7AUkV65krqRd81A9Ig5MnA2xP2eqvkqDpK4gTR3MNBPVm2eIOlhsl6vJzxeJ51v0NRWoTpl",
	"7fSs+W8GYYoaG3b9F2r8vLSfI+V3j0upjevoTMMkgJCRiqe6utjyx0z1Cb/BsfP1dXyeWs4qO9K+KWIQ",
	"/Mn+HT9WdbqS0PLQsKkuOJaLfIfHDfzsYTzSqNeX23tnxaAqT6ZI9/UTxlIWgzCWBD7okJaccH/G1njb",
	"dCOD9IPjk3e/MDlYSLPr1hHe05JvlPev0vb/6nYVB/3+erWf5ocJ/xWuV9/4APkSR58Zc2yecDz61c57",
	"hwvc+OVrdQV9tj29541H3e6TXZQ/HEo738af/W3/TwAAAP//4angOj8NAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
